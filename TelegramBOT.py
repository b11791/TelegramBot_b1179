import json

import telebot
import random
from telebot import types
import config

bot = telebot.TeleBot(config.TOKEN)
with open('data.json', 'r', encoding='utf-8') as JasonNewstead:
    data = json.load(JasonNewstead)

def design_buttons(buttons):
    markup = types.InlineKeyboardMarkup()
    if len(buttons) % 2 == 0:
        for ind, btn in enumerate(buttons):
            if ind % 2 == 0:
                btn1 = btn
            elif ind % 2 != 0:
                btn2 = btn
                markup.row(btn1[0], btn2[0])
    else:
        for ind, btn in enumerate(buttons):
            if ind % 2 == 0 and buttons[-1] != btn:
                btn1 = btn
            elif ind % 2 != 0 and buttons[-1] != btn:
                btn2 = btn
                markup.row(btn1[0], btn2[0])
            else:
                markup.row(btn[0])
    return markup

@bot.message_handler(commands=["start"])
def welcome_user(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="üéß –ñ–∞–Ω—Ä—ã", callback_data="genres")
    btn2 = types.InlineKeyboardButton(text="üö® –ü–æ–º–æ—â—å", callback_data="help")
    markup.row(btn1, btn2)
    bot.send_message(message.chat.id, f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>\n "
                                      f"–Ø –±–æ—Ç-—É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –ø–µ—Å–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç–∞ @b1179\n"
                                      f"---------------------------------\n"
                                      f"üéô–¢—Ä–µ–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∂–∞–Ω—Ä–∞–º, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∏ –∞–ª—å–±–æ–º–∞–º. "
                                      f"–î–∞, –∫–∞–∫ –±—ã —Å—Ç—Ä–∞–Ω–Ω–æ —ç—Ç–æ –Ω–µ –≤—ã–≥–ª—è–¥–µ–ª–æ, —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –ø–æ –æ–¥–Ω–æ–π –ø–µ—Å–Ω–µ (–º–Ω–µ –ª–µ–Ω—å –¥–æ–±–∞–ª—è—Ç—å –µ—â—ë).\n\n"
                                      f"–ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞ –∏ —Ç–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ. –ù—É –∞ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ, —Ç–æ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É ü§ñ –±–æ—Ç—É, —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è",
                     parse_mode="html", reply_markup=markup)


@bot.callback_query_handler(func=lambda cb: cb.data == 'back')
def go_back(callback):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="üéß –ñ–∞–Ω—Ä—ã", callback_data="genres")
    btn2 = types.InlineKeyboardButton(text="üö® –ü–æ–º–æ—â—å", callback_data="help")
    markup.row(btn1, btn2)
    bot.send_message(callback.message.chat.id, f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{callback.message.from_user.first_name}</b>\n "
                                      f"–Ø –±–æ—Ç-—É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –ø–µ—Å–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç–∞ @b1179\n"
                                      f"---------------------------------\n"
                                      f"üéô–¢—Ä–µ–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∂–∞–Ω—Ä–∞–º, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∏ –∞–ª—å–±–æ–º–∞–º. "
                                      f"–î–∞, –∫–∞–∫ –±—ã —Å—Ç—Ä–∞–Ω–Ω–æ —ç—Ç–æ –Ω–µ –≤—ã–≥–ª—è–¥–µ–ª–æ, —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –ø–æ –æ–¥–Ω–æ–π –ø–µ—Å–Ω–µ (–º–Ω–µ –ª–µ–Ω—å –¥–æ–±–∞–ª—è—Ç—å –µ—â—ë).\n\n"
                                      f"–ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞ –∏ —Ç–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ. –ù—É –∞ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ, —Ç–æ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É ü§ñ –±–æ—Ç—É, —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è",
                     parse_mode="html", reply_markup=markup)
    # bot.delete_message(callback.message.chat.id, callback.message.message_id)

@bot.message_handler(commands=["help"])
def do_help_command(message):
    bot.delete_message(message.chat.id, message.message_id)
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–ì–∞–π–¥ üìú", callback_data="guide")
    btn2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back")
    markup.row(btn1)
    markup.row(btn2)
    bot.send_message(message.chat.id, f"~ –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º\n"
                                      f"~ –ï—Å–ª–∏ –±–æ—Ç –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç –æ–Ω –ª–∏–±–æ –≥—Ä—É–∑–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç, –ª–∏–±–æ –≤—ã–∫–ª—é—á–µ–Ω\n"
                                      f"~ –ë–æ—Ç —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –Ω–µ—Ç–∏–ø–∏—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏\n"
                                      f"~ –ï—Å–ª–∏ –Ω–∞—à–µ–ª(-–∞) –æ—à–∏–±–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç—Ä–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë, –ø–∏—à–∏ —ç—Ç–æ–º—É"
                                      f" –∂–µ –±–æ—Ç—É (–æ–Ω –∫–æ–Ω–µ—á–Ω–æ –∂–µ –±—Ä–µ–¥–æ–≤–æ –æ—Ç–≤–µ—Ç–∏—Ç, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ —É–≤–∏–∂—É)\n"
                                      f"~ –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Ç—Ä–µ–∫–∞–º–∏, —Ç–æ –Ω–∏–∂–µ –º–∏–Ω–∏ –≥–∞–π–¥ üëá\n\n"
                                      f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - @b1179",
                     parse_mode="html", reply_markup=markup)




@bot.callback_query_handler(func=lambda cb: cb.data == 'help')
def do_help(callback):
    bot.delete_message(callback.message.chat.id, callback.message.message_id)
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–ì–∞–π–¥ üìú", callback_data="guide")
    btn2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back")
    markup.row(btn1)
    markup.row(btn2)
    bot.send_message(callback.message.chat.id, f"~ –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º\n"
                                      f"~ –ï—Å–ª–∏ –±–æ—Ç –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç –æ–Ω –ª–∏–±–æ –≥—Ä—É–∑–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç, –ª–∏–±–æ –≤—ã–∫–ª—é—á–µ–Ω\n"
                                      f"~ –ë–æ—Ç —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –Ω–µ—Ç–∏–ø–∏—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏\n"
                                      f"~ –ï—Å–ª–∏ –Ω–∞—à–µ–ª(-–∞) –æ—à–∏–±–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç—Ä–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë, –ø–∏—à–∏ —ç—Ç–æ–º—É"
                                      f" –∂–µ –±–æ—Ç—É (–æ–Ω –∫–æ–Ω–µ—á–Ω–æ –∂–µ –±—Ä–µ–¥–æ–≤–æ –æ—Ç–≤–µ—Ç–∏—Ç, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ —É–≤–∏–∂—É)\n"
                                      f"~ –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Ç—Ä–µ–∫–∞–º–∏, —Ç–æ –Ω–∏–∂–µ –º–∏–Ω–∏ –≥–∞–π–¥ üëá\n\n"
                                      f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - @b1179",
                     parse_mode="html", reply_markup=markup)

@bot.callback_query_handler(func=lambda cb: cb.data == 'guide')
def get_guide(callback):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è©", callback_data="android1")
    btn2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="help")
    markup.row(btn1, btn2)
    bot.send_message(callback.message.chat.id, "üíª –ï—Å–ª–∏ —É —Ç–µ–±—è –∫–æ–º–ø, —Ç–æ —Ç—É—Ç –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ.\n\n"
                                               "<em><b>–ü—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –Ω–∞ —Ç—Ä–µ–∫</b></em> > <em><b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫</b></em> > <em><b>–ò –¥–∞–ª—å—à–µ —Ç—Ä–µ–∫ –≤ —Ç—É"
                                               " –ø–∞–ø–∫—É –∫—É–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ</b></em>. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–ø—è—Ç—Å–≤–∏–µ - —Ç–≤–æ—ë –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                                               "–ú—É–∑—ã–∫—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–∞—á–∏–Ω–∞—è –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –µ—ë –ø–æ—Å–ª—É—à–∞—Ç—å"
                                               " –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –≤ –∫–∞–∫–æ–º –Ω–∏–±—É–¥—å –º–æ–Ω—Ç–∞–∂–µ. –≠—Ç–æ—Ç –±–æ—Ç —Ö–æ—Ä–æ—à —Ç–µ–º, —á—Ç–æ –±—ã—Å—Ç—Ä–æ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç "
                                               "–ø–µ—Å–Ω–∏ (—Ö–æ—Ç—å –∏ –∏–∑ –º–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞), –Ω–æ –≤—Å—ë –∂–µ –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –≤–∏—Ä—É—Å–æ–≤ üëæ\n\n"
                                               "üì± –í —Å–ª—É—á–∞–µ —Å –∫–∏—Ä–ø–∏—á–∞–º–∏, –≤—Å—ë –≥–æ—Ä–∞–∑–¥–æ —Å–ª–æ–∂–Ω–µ–µ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–µ–µ...",
                    parse_mode="html", reply_markup=markup)


@bot.callback_query_handler(func=lambda cb: cb.data == 'android1')
def phones(callback):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è©", callback_data="android2")
    btn2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="guide")
    markup.row(btn1, btn2)
    with open("tracks/Images/Guide.jpg", "rb") as image:
        bot.send_photo(callback.message.chat.id, image)
    bot.send_message(callback.message.chat.id, "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ "
                                               "—É–ø—Ä–æ—â–∞–µ—Ç –∂–∏–∑–Ω—å. C IOS –≤ —ç—Ç–æ–º –ø–ª–∞–Ω–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π.\n"
                                               "–ù–µ –∏—Å–∫–ª—é—á–µ–Ω–æ, —á—Ç–æ —è –æ—à–∏–±–∞—é—Å—å –∏ —Ñ–∞–π–ª–æ–≤—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –Ω–∞ –Ω–∏—Ö."
                                               " –¢–∞–∫ –∏–ª–∏ –∏–Ω–∞—á–µ –Ω–∞ –ê–Ω–¥—Ä–æ–∏–¥–∞—Ö –∏–º–∏ –º–æ–∂–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\n"
                                               "üìÅ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–Ω–æ <b>–ª–∏–±–æ</b> —Å–∫–∞—á–∞—Ç—å –≤ –∫–∞–∫–æ–º –Ω–∏–±—É–¥—å Play Market, "
                                               "<b>–ª–∏–±–æ</b> –æ–Ω —Å—Ä–∞–∑—É —É–∂–µ –±—É–¥–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω. –Ø —é–∑–∞—é –°—Ö –∏ —Ç–µ–±–µ —Ç–æ–∂–µ —Å–æ–≤–µ—Ç—É—é, –∏–±–æ"
                                               " –≤–µ—â—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è.\n\n"
                                               "–ó–∞—Ö–æ–¥–∏–º –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∏ –∏–¥—ë–º –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏ üëá\n"
                                               "<em><b>–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–º—è—Ç—å>Android(–µ—Å–ª–∏ —É –≤–∞—Å –∞–Ω–¥—Ä–æ–∏–¥)>data>org.telegram.messenger>files>Telegram>Telegram Audio</b></em>",
                     parse_mode="html", reply_markup=markup)

@bot.callback_query_handler(func=lambda cb: cb.data == 'android2')
def go_files(callback):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="android1")
    markup.row(btn1)
    with open("tracks/Images/1.jpg", "rb") as image:
        bot.send_photo(callback.message.chat.id, image)
    bot.send_message(callback.message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–µ—Å–Ω–∏(–∏–ª–∏ –∞—É–¥–∏–æ) –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏—Ö –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É.\n"
                                               "–ï—Å—Ç—å mp3-–ø–ª–µ–µ—Ä? –í–æ–æ–±—â–µ —à–µ–¥–µ–≤—Ä–∞–ª—å–Ω–æ, –∑–∞–∫–∏–¥—ã–≤–∞–π –∏—Ö —Ç—É–¥–∞\n"
                                               "–ï—Å–ª–∏ –∂–µ –Ω–µ—Ç, —Ç–æ —Å–æ–≤–µ—Ç—É—é —Å–∫–∞—á–∞—Ç—å —Ç.–∫ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ —Å–ª—É—à–∞—Ç—å –∫–∞–∫-—Ç–æ –Ω–µ –æ—á–µ–Ω—å.\n"
                                               "–ù—É –∏–ª–∏ –Ω–∞ –∫—Ä–∞–π–Ω—è–∫ —Å–æ–∑–¥–∞–π –≥–¥–µ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø–∞–ø–∫—É –∏ –∑–∞–∫–∏–Ω—å –∏—Ö —Ç—É–¥–∞, –Ω–∞–¥–æ –∂–µ –∏—Ö –≥–¥–µ-—Ç–æ –¥–µ—Ä–∂–∞—Ç—å\n\n"
                                               "–í–æ–æ–±—â–µ–º-—Ç–æ –∏ –≤—Å—ë, –∫–∞–∫ –∏—Ö –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ä–µ—à–∞—Ç—å —Ç–µ–±–µ.",
                    parse_mode="html", reply_markup=markup)


########################################################################################################################
@bot.callback_query_handler(func=lambda cb: cb.data == 'genres')
def get_genres(callback):
    bot.delete_message(callback.message.chat.id, callback.message.message_id)
    genres_id = data['genres'].keys()
    buttons = [
        [types.InlineKeyboardButton(text=data['genres'][genre_id]['name'], callback_data=f'genre_{genre_id}')]
        for genre_id in genres_id
    ]
    buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back")])
    markup = design_buttons(buttons)
    bot.send_message(callback.message.chat.id, f"üíΩ –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏"
                                               f" –Ω–∞–∂–º–∏ <b>–ù–ê–ó–ê–î</b>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n\n"
                                               f"/help - –ü–æ–º–æ—â—å/–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üí¨",
                     parse_mode="html", reply_markup=markup)

    # bot.delete_message(callback.message.chat.id, callback.message.message_id)


@bot.callback_query_handler(func=lambda cb: cb.data.startswith('genre_'))
def get_singers(callback):
    _, genre_id = callback.data.split('_')
    singers_groups_id = data['genres'][genre_id]['singers/groups'].keys()
    buttons = [
        [types.InlineKeyboardButton(text=data["genres"][genre_id]["singers/groups"][singer_group_id]["name"],
                                    callback_data=f'singergroup_{genre_id}_{singer_group_id}')]
        for singer_group_id in singers_groups_id
    ]
    buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="genres")])
    markup = design_buttons(buttons)
    bot.send_message(callback.message.chat.id, f"–í—ã–±–µ—Ä–∏ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—èüé∏–ì—Ä—É–ø–ø—É –∏–ª–∏ –Ω–∞–∂–º–∏ <b>–ù–ê–ó–ê–î</b>,"
                                               f" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n\n"
                                               f"/help - –ü–æ–º–æ—â—å/–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üí¨",
                     parse_mode="html", reply_markup=markup)
    # bot.delete_message(callback.message.chat.id, callback.message.message_id)


@bot.callback_query_handler(func=lambda cb: cb.data.startswith('singergroup_'))
def get_songs_or_albums(callback):
    _, genre_id, singer_group_id = callback.data.split('_')
    photo_path = data['genres'][genre_id]['singers/groups'][singer_group_id]["photo"]
    with open(photo_path, "rb") as photo:
        bot.send_photo(callback.message.chat.id, photo)
    if 'songs' in data['genres'][genre_id]['singers/groups'][singer_group_id].keys():
        songs_id = data["genres"][genre_id]["singers/groups"][singer_group_id]["songs"].keys()
        buttons = [
            [types.InlineKeyboardButton(
                text=data["genres"][genre_id]["singers/groups"][singer_group_id]["songs"][song_id]["name"],
                callback_data=f'song_{genre_id}_{singer_group_id}_{song_id}')]
            for song_id in songs_id
        ]
        buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data=f"genre_{genre_id}")])
        markup = design_buttons(buttons)
        bot.send_message(callback.message.chat.id,
                         f"–ü–µ—Å–Ω–∏/–¢—Ä–µ–∫–∏ <em><b>{data['genres'][genre_id]['singers/groups'][singer_group_id]['name']}</b></em>. –ù–∞–∂–º–∏ <b>–ù–ê–ó–ê–î</b>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n\n"
                         f"/help - –ü–æ–º–æ—â—å/–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üí¨\n"
                         f"P.S –°–æ—Ä—è–Ω –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ üêå—Ç—Ä–µ–∫–æ–≤, —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∫ –Ω–∏–∫–∞–∫¬Ø\_(„ÉÑ)_/¬Ø",
                         parse_mode="html", reply_markup=markup)
    elif 'albums' in data['genres'][genre_id]['singers/groups'][singer_group_id].keys():
        albums_id = data["genres"][genre_id]["singers/groups"][singer_group_id]["albums"].keys()
        buttons = [
            [types.InlineKeyboardButton(
                text=data["genres"][genre_id]["singers/groups"][singer_group_id]["albums"][album_id]["name"],
                callback_data=f'album_{genre_id}_{singer_group_id}_{album_id}')]
            for album_id in albums_id
        ]
        buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data=f"genre_{genre_id}")])
        markup = design_buttons(buttons)
        bot.send_message(callback.message.chat.id,
                         f"–ê–ª—å–±–æ–º—ã <em><b>{data['genres'][genre_id]['singers/groups'][singer_group_id]['name']}</b></em>. –ù–∞–∂–º–∏ <b>–ù–ê–ó–ê–î</b>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n\n"
                         f"/help - –ü–æ–º–æ—â—å/–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üí¨",
                         parse_mode="html", reply_markup=markup)
    # bot.delete_message(callback.message.chat.id, callback.message.message_id)

@bot.callback_query_handler(func=lambda cb: cb.data.startswith('album_'))
def get_album_songs(callback):
    _, genre_id, singer_group_id, album_id = callback.data.split('_')
    album_songs_id = data["genres"][genre_id]["singers/groups"][singer_group_id]["albums"][album_id]["songs"].keys()
    photo_path = data['genres'][genre_id]['singers/groups'][singer_group_id]["albums"][album_id]["cover"]
    with open(photo_path, "rb") as photo:
        bot.send_photo(callback.message.chat.id, photo)
    buttons = [
        [types.InlineKeyboardButton(text=data["genres"][genre_id]["singers/groups"][singer_group_id]["albums"][album_id]["songs"][album_song_id]["name"],
                                    callback_data=f'albumsong_{genre_id}_{singer_group_id}_{album_id}_{album_song_id}')]
        for album_song_id in album_songs_id
    ]
    buttons.append(
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data=f"singergroup_{genre_id}_{singer_group_id}")])
    markup = design_buttons(buttons)
    bot.send_message(callback.message.chat.id,
                     f"–ê–ª—å–±–æ–º <em><b>{data['genres'][genre_id]['singers/groups'][singer_group_id]['albums'][album_id]['name']}</b></em>. –ù–∞–∂–º–∏ <b>–ù–ê–ó–ê–î</b>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n\n"
                     f"/help - –ü–æ–º–æ—â—å/–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üí¨\n"
                     f"P.S –°–æ—Ä—è–Ω –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ üêå—Ç—Ä–µ–∫–æ–≤, —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∫ –Ω–∏–∫–∞–∫¬Ø\_(„ÉÑ)_/¬Ø",
                     parse_mode="html", reply_markup=markup)
    # bot.delete_message(callback.message.chat.id, callback.message.message_id)


@bot.callback_query_handler(func=lambda cb: cb.data.startswith('albumsong_'))
def get_album_song(callback):
    _, genre_id, singer_group_id, album_id, album_song_id = callback.data.split('_')
    song_path = data["genres"][genre_id]["singers/groups"][singer_group_id]["albums"][album_id]["songs"][album_song_id][
        "src"]
    markup = types.InlineKeyboardMarkup()
    back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data=f"album_{genre_id}_{singer_group_id}_{album_id}")
    markup.row(back)
    bot.send_message(callback.message.chat.id, "‚è≥")
    with open(song_path, "rb") as audio:
        bot.send_audio(callback.message.chat.id, audio, reply_markup=markup, timeout=60)
    bot.delete_message(callback.message.chat.id, callback.message.message_id + 1)
        # bot.delete_message(callback.message.chat.id, callback.message.message_id)


@bot.callback_query_handler(func=lambda cb: cb.data.startswith('song_'))
def get_song(callback):
    _, genre_id, singer_group_id, song_id = callback.data.split('_')
    song_path = data["genres"][genre_id]["singers/groups"][singer_group_id]["songs"][song_id]["src"]
    markup = types.InlineKeyboardMarkup()
    back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data=f"singergroup_{genre_id}_{singer_group_id}")
    markup.row(back)
    bot.send_message(callback.message.chat.id, "‚è≥")
    with open(song_path, "rb") as audio:
        bot.send_audio(callback.message.chat.id, audio, reply_markup=markup, timeout=60)
    bot.delete_message(callback.message.chat.id, callback.message.message_id+1)
    # bot.delete_message(callback.message.chat.id, callback.message.message_id)

########################################################################################################################
@bot.message_handler(content_types=['sticker'])
def handle_sticker(message):
    bot.reply_to(message, "–°—Ç–∏–∫–µ—Ä –∫—Ä—É—Ç–æ–π, –Ω–µ —Å–ø–æ—Ä—é, –Ω–æ –≤—Å–µ –∂–µ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éü§ó.")


@bot.message_handler()
def messaging(message):
    with open("users_comments.txt", "a", encoding="utf-8") as file:
        file.write(f"{message.from_user.first_name}({message.from_user.username}): {message.text}\n")
    another_mes = True

    if random.randint(1, 10) == 1:
        if message.from_user.is_premium != None:
            bot.send_message(message.chat.id, "–¢—ã —á–µ–≥–æ –±–æ–≥–∞—Ç—ã–π —Ç–∞–∫–æ–π?üí∏\n –ö—É–ø–∏ –º–Ω–µ —Ç–æ–∂–µ –ø—Ä–µ–º–∫—É –ø–∂")
            another_mes = False

    if "–∫–∞–∫ –¥–µ–ª" in message.text.lower():
        answers = ["–ù–æ—Ä–º–∞–ª—å–Ω–æ.", "–û—Ç–ª–∏—á–Ω–æ.", "–¢–æ–ø", "–ü–µ–ª—å–º–µ–Ω–∏..."]
        bot.reply_to(message, random.choice(answers))
    elif "–ø—Ä–∏–≤" in message.text.lower() or "–¥–∞—Ä–æ–≤" in message.text.lower() or "–∫—É" in message.text.lower():
        answers = ["–Ø –©–ê–° –°–ù–ò–ú–£ –¢–†–£–°–´", "–ü—Ä–∏–≤–µ—Ç!?", "ü§®–ó–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å –∂–µ"]
        bot.reply_to(message, random.choice(answers))
    elif another_mes:
        answers = ["–û–ø—è—Ç—å —ç—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ—à–µ–Ω–Ω–∏–∫–∏ —Å–æ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–∫–æ–ª–∞–º–∏...", "–≠—Ç–æ –±–∞–∑–∞"]
        bot.reply_to(message, random.choice(answers))


bot.polling(none_stop=True)